Index: tests/eventController.test.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const request = require(\"supertest\");\nconst jwt = require(\"jsonwebtoken\");\nconst app = require(\"../server\");\nconst User = require(\"../models/userModel\");\nconst Event = require(\"../models/eventModel\");\n\nconst createToken = (_id) => {\n    return jwt.sign({ _id }, process.env.SECRET, { expiresIn: \"3d\" });\n};\n\nconst getToken = async (email) => {\n    const createTestUser = await User.signup(\"TestFirst\", \"TestLast\", \"leader\", \"CityTest\", 18, \"male\", email, \"Temppass12!\");\n    global.user_id = createTestUser._id.toString();\n    return createToken(user_id);\n}\n\nconst generateRandomString = (length = 6) => {\n    return Math.random().toString(20).substr(2, length);\n}\n\nglobal.email = generateRandomString() + \"admin@admin.com\";\nglobal.token = await getToken(email);\nglobal.event_id = null;\n\ndescribe(\"POST /api/event/create\", () => {\n    it(\"should create new event\", async () => {\n        const response = await request(app)\n            .post(\"/api/event/create\")\n            .set(\"Authorization\", \"Bearer \" + token)\n            .send({\n                event_name: \"TestEvent\",\n                country: \"TestCountry\",\n                start_date: \"2023-10-01T17:00:00.000+00:00\",\n                end_date: \"2023-10-01T19:00:00.000+00:00\"\n            });\n        event_id = response.body._id;\n\n        expect(response.status).toBe(201);\n        expect(response.body).toHaveProperty(\"event_name\", \"TestEvent\");\n        expect(response.body).toHaveProperty(\"country\", \"TestCountry\");\n        expect(response.body).toHaveProperty(\"user_id\", user_id);\n    });\n});\n\ndescribe(\"GET /api/event/event_id\", () => {\n    it(\"should get single event\", async () => {\n        const response = await request(app)\n            .get(\"/api/event/\" + event_id)\n            .set(\"Authorization\", \"Bearer \" + token);\n\n        expect(response.status).toBe(200);\n        expect(response.body).toHaveProperty(\"event_name\", \"TestEvent\");\n        expect(response.body).toHaveProperty(\"country\", \"TestCountry\");\n        expect(response.body).toHaveProperty(\"user_id\", user_id);\n    });\n});\n\ndescribe(\"GET /api/event/\", () => {\n    it(\"should get all events\", async () => {\n        const response = await request(app)\n            .get(\"/api/event/\")\n            .set(\"Authorization\", \"Bearer \" + token);\n\n        expect(response.status).toBe(200);\n        expect(response.body).toHaveProperty(\"events\");\n        expect(response.body.events).toHaveLength(1);\n    });\n});\n\ndescribe(\"PATCH /api/event/update/event_id\", () => {\n    it(\"should update event\", async () => {\n        const response = await request(app)\n            .patch(\"/api/event/update/\" + event_id)\n            .set(\"Authorization\", \"Bearer \" + token)\n            .send({\n                event_name: \"TestEvent1\",\n                country: \"TestCountry1\",\n                start_date: \"2023-11-01T17:00:00.000+00:00\",\n                end_date: \"2023-11-01T19:00:00.000+00:00\",\n                description: \"testDescription\",\n                capacity: 200,\n                ticket_start_sale_date: \"2023-11-01T17:00:00.000+00:00\",\n                ticket_end_sale_date: \"2023-11-01T19:00:00.000+00:00\",\n                ticket_price: 100,\n                ticket_currency: \"usdollar\",\n                age_min: 18,\n                age_max: 40\n            });\n\n        expect(response.status).toBe(200);\n        expect(response.body).toHaveProperty(\"event_name\", \"TestEvent1\");\n        expect(response.body).toHaveProperty(\"country\", \"TestCountry1\");\n        expect(response.body).toHaveProperty(\"description\", \"testDescription\");\n        expect(response.body).toHaveProperty(\"capacity\", 200);\n        expect(response.body).toHaveProperty(\"ticket_price\", 100);\n        expect(response.body).toHaveProperty(\"ticket_currency\", \"usdollar\");\n        expect(response.body).toHaveProperty(\"age_min\", 18);\n        expect(response.body).toHaveProperty(\"age_max\", 40);\n        expect(response.body).toHaveProperty(\"user_id\", user_id);\n    });\n});\n\ndescribe(\"PATCH /api/event/event_id/add-user\", () => {\n    it(\"should add new user to event\", async () => {\n        const newEmail = new Date().getTime() + email;\n        const response = await request(app)\n            .patch(\"/api/event/\" + event_id + \"/add-user\")\n            .set(\"Authorization\", \"Bearer \" + token)\n            .send({\n                first_name: \"TestFirst\",\n                last_name: \"TestLast\",\n                role: \"participant\",\n                email: newEmail,\n                password: \"Temppass12!\",\n                city: \"CityTest\",\n                age: 18,\n                sex: \"male\",\n            });\n\n        const getUser = await User.findOne({ email: newEmail });\n        global.newEventUser = getUser._id.toString();\n        expect(response.status).toBe(200);\n        expect(response.body).toHaveProperty(\"event_name\", \"TestEvent1\");\n        expect(response.body).toHaveProperty(\"country\", \"TestCountry1\");\n        expect(response.body).toHaveProperty(\"description\", \"testDescription\");\n        expect(response.body).toHaveProperty(\"capacity\", 200);\n        expect(response.body).toHaveProperty(\"ticket_price\", 100);\n        expect(response.body).toHaveProperty(\"ticket_currency\", \"usdollar\");\n        expect(response.body).toHaveProperty(\"age_min\", 18);\n        expect(response.body).toHaveProperty(\"age_max\", 40);\n        expect(response.body).toHaveProperty(\"user_id\", user_id);\n        expect(response.body).toHaveProperty(\"participant_ids\");\n        expect(response.body.participant_ids).toHaveLength(1);\n        expect(response.body.participant_ids).toEqual([newEventUser]);\n    });\n});\n\ndescribe(\"GET /api/event/event_id/list\", () => {\n    it(\"should get list of all users of event\", async () => {\n        const response = await request(app)\n            .get(\"/api/event/\" + event_id + \"/list\")\n            .set(\"Authorization\", \"Bearer \" + token);\n\n        expect(response.status).toBe(200);\n        expect(response.body).toHaveProperty(\"usersList\");\n        expect(response.body.usersList).toHaveLength(1);\n    });\n});\n\ndescribe(\"DELETE /api/event/event_id/delete-user/user_id\", () => {\n    it(\"should delete user from event\", async () => {\n        const response = await request(app)\n            .delete(\"/api/event/\" + event_id + \"/delete-user/\" + newEventUser)\n            .set(\"Authorization\", \"Bearer \" + token);\n\n        expect(response.status).toBe(200);\n        expect(response.body).toHaveProperty(\"event_name\", \"TestEvent1\");\n        expect(response.body).toHaveProperty(\"country\", \"TestCountry1\");\n        expect(response.body).toHaveProperty(\"description\", \"testDescription\");\n        expect(response.body).toHaveProperty(\"capacity\", 200);\n        expect(response.body).toHaveProperty(\"ticket_price\", 100);\n        expect(response.body).toHaveProperty(\"ticket_currency\", \"usdollar\");\n        expect(response.body).toHaveProperty(\"age_min\", 18);\n        expect(response.body).toHaveProperty(\"age_max\", 40);\n        expect(response.body).toHaveProperty(\"user_id\", user_id);\n        expect(response.body).toHaveProperty(\"participant_ids\");\n        expect(response.body.participant_ids).toHaveLength(0);\n    });\n});\n\ndescribe(\"PATCH /api/event/subscribe/event_id\", () => {\n    it(\"should subscribe to the event\", async () => {\n        const response = await request(app)\n            .patch(\"/api/event/subscribe/\" + event_id)\n            .set(\"Authorization\", \"Bearer \" + token);\n\n        expect(response.status).toBe(200);\n        expect(response.body).toHaveProperty(\"first_name\", \"TestFirst\");\n        expect(response.body).toHaveProperty(\"last_name\", \"TestLast\");\n        expect(response.body).toHaveProperty(\"role\", \"leader\");\n        expect(response.body).toHaveProperty(\"city\", \"CityTest\");\n        expect(response.body).toHaveProperty(\"age\", 18);\n        expect(response.body).toHaveProperty(\"sex\", \"male\");\n        expect(response.body).toHaveProperty(\"email\", email);\n        expect(response.body).toHaveProperty(\"event_ids\", [event_id]);\n    });\n});\n\ndescribe(\"PATCH /api/event/subscribe/event_id\", () => {\n    it(\"should unsubscribe to the event\", async () => {\n        const response = await request(app)\n            .patch(\"/api/event/subscribe/\" + event_id)\n            .set(\"Authorization\", \"Bearer \" + token);\n\n        expect(response.status).toBe(200);\n        expect(response.body).toHaveProperty(\"first_name\", \"TestFirst\");\n        expect(response.body).toHaveProperty(\"last_name\", \"TestLast\");\n        expect(response.body).toHaveProperty(\"role\", \"leader\");\n        expect(response.body).toHaveProperty(\"city\", \"CityTest\");\n        expect(response.body).toHaveProperty(\"age\", 18);\n        expect(response.body).toHaveProperty(\"sex\", \"male\");\n        expect(response.body).toHaveProperty(\"email\", email);\n        expect(response.body).toHaveProperty(\"event_ids\", []);\n    });\n});\n\ndescribe(\"DELETE /api/event/delete/event_id\", () => {\n    it(\"should delete event\", async () => {\n        const response = await request(app)\n            .delete(\"/api/event/delete/\" + event_id)\n            .set(\"Authorization\", \"Bearer \" + token);\n\n        expect(response.status).toBe(200);\n        expect(response.body).toHaveProperty(\"event_name\", \"TestEvent1\");\n        expect(response.body).toHaveProperty(\"country\", \"TestCountry1\");\n        expect(response.body).toHaveProperty(\"description\", \"testDescription\");\n        expect(response.body).toHaveProperty(\"capacity\", 200);\n        expect(response.body).toHaveProperty(\"ticket_price\", 100);\n        expect(response.body).toHaveProperty(\"ticket_currency\", \"usdollar\");\n        expect(response.body).toHaveProperty(\"age_min\", 18);\n        expect(response.body).toHaveProperty(\"age_max\", 40);\n        expect(response.body).toHaveProperty(\"user_id\", user_id);\n    });\n});\n\ndescribe(\"POST /api/event/import\", () => {\n    it(\"should import external event\", async () => {\n        const response = await request(app)\n            .post(\"/api/event/import\")\n            .set(\"Authorization\", \"Bearer \" + token)\n            .send({\n                url: \"https://book.chanceyouth.org/api/camps/4\",\n                country: \"Belarus\"\n            });\n\n        global.import_event = response.body._id;\n\n        expect(response.status).toBe(200);\n        expect(response.body).toHaveProperty(\"event_name\", \"Winter Retreat 2023\");\n        expect(response.body).toHaveProperty(\"country\", \"Belarus\");\n        expect(response.body).toHaveProperty(\"user_id\", user_id);\n    });\n});\n\nafterAll(async () => {\n    await User.deleteOne({ email });\n    await User.deleteOne({ _id: newEventUser });\n    await Event.deleteOne({ _id: import_event });\n});
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests/eventController.test.js b/tests/eventController.test.js
--- a/tests/eventController.test.js	(revision 9ee3a312b6fb4b56cf3c9bfef662a8e81ceb452f)
+++ b/tests/eventController.test.js	(date 1699041731326)
@@ -243,7 +243,9 @@
 });
 
 afterAll(async () => {
-    await User.deleteOne({ email });
-    await User.deleteOne({ _id: newEventUser });
-    await Event.deleteOne({ _id: import_event });
+    await Promise.all([
+        User.deleteOne({ email }),
+        User.deleteOne({ _id: newEventUser }),
+        Event.deleteOne({ _id: import_event })
+    ]);
 });
\ No newline at end of file
